name: Build and Deploy Windows App

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Electron Builder
        run: npm install -g electron-builder

      - name: Build Electron App for Windows
        run: electron-builder build --windows --publish never

      - name: Upload to DigitalOcean Spaces
        run: |
          $space = "nyc-tutorial-space"
          $region = "nyc3"
          $storageType = "STANDARD"
          $key = "5SGMECSBJ6UPVC2AJ6B4"
          $secret = "${{ secrets.DO_TOKEN }}"

          function putS3 {
            param (
              [string]$path,
              [string]$file,
              [string]$spacePath,
              [string]$space,
              [string]$region,
              [string]$storageType,
              [string]$key,
              [string]$secret
            )

            $date = Get-Date -Format "ddd, dd MMM yyyy HH:mm:ss zzz"
            $acl = "x-amz-acl:public-read"
            $contentType = "text/plain"
            $storageTypeHeader = "x-amz-storage-class:$storageType"
            $stringToSign = "PUT`n`n$contentType`n$date`n$acl`n$storageTypeHeader`n/$space$spacePath$file"
            $signature = New-Object System.Security.Cryptography.HMACSHA1
            $signature.Key = [Convert]::FromBase64String($secret)
            $hashBytes = $signature.ComputeHash([Text.Encoding]::UTF8.GetBytes($stringToSign))
            $signature = [Convert]::ToBase64String($hashBytes)

            $headers = @{
              "Host" = "$space.$region.digitaloceanspaces.com"
              "Date" = "$date"
              "Content-Type" = "$contentType"
              $storageTypeHeader = "$storageType"
              $acl = "$acl"
              "Authorization" = "AWS $key:$signature"
            }

            Invoke-RestMethod -Uri "https://$space.$region.digitaloceanspaces.com$spacePath$file" -Method Put -Headers $headers -InFile "$path\$file"
          }

          foreach ($file in Get-ChildItem -Path "dist" -Filter "*.exe") {
            putS3 -path "dist" -file $file.Name -spacePath "/" -space $space -region $region -storageType $storageType -key $key -secret $secret
          }
        env:
          DO_TOKEN: ${{ secrets.DO_TOKEN }}

      # - name: Upload to DigitalOcean Spaces
      #   run: |
      #     curl -X PUT -T "dist/20-20-20-refresh Setup 1.0.0.exe" --header "Authorization: Bearer ${{ secrets.DO_TOKEN }}" "https://20-20-20.blr1.digitaloceanspaces.com"
      #   env:
      #     DO_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}

      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: windows-executable
      #     path: dist/20-20-20-refresh Setup 1.0.0.exe

      # - name: Upload to DigitalOcean Spaces
      #   run: |
      #     aws configure set profile.20-20-20.region blr1
      #     aws configure set profile.20-20-20.s3.endpoint https://20-20-20.blr1.digitaloceanspaces.com
      #     aws configure set profile.20-20-20.s3.signature_version s3v4
      #     aws configure set profile.20-20-20.credential_source environment
      #     aws configure set aws_access_key_id ${{ secrets.DO_ACCESS_KEY_ID }} --profile 20-20-20
      #     aws configure set aws_secret_access_key ${{ secrets.DO_SECRET_ACCESS_KEY }} --profile 20-20-20
      #     aws configure set region blr1 --profile 20-20-20
      #     aws s3 cp "dist/20-20-20-refresh Setup 1.0.0.exe" s3://20-20-20/app.exe --acl public-read --profile 20-20-20
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.DO_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SECRET_ACCESS_KEY }}
      #     AWS_REGION: blr1

          